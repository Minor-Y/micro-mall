{"ast":null,"code":"export default {\n  data() {\n    return {\n      menuslist: [],\n      elicon: {\n        101: 'el-icon-data-analysis',\n        //首页概览\n        112: 'el-icon-goods',\n        //商品\n        113: 'el-icon-shopping-bag-2',\n        //商品列表\n        123: 'el-icon-document-remove',\n        //订单\n        124: 'el-icon-tickets',\n        //订单列表\n        134: 'el-icon-user',\n        //客户\n        135: 'el-icon-user-solid',\n        //客户列表\n        136: 'el-icon-collection-tag',\n        //客户标签\n        145: 'el-icon-data-line',\n        //数据\n        146: 'el-icon-pie-chart',\n        //数据概览\n        147: 'el-icon-c-scale-to-original',\n        //客流分析\n        156: 'el-icon-setting',\n        //设置\n        157: 'el-icon-s-home',\n        //店铺信息\n        158: 'el-icon-s-custom',\n        //账号权限\n        159: 'el-icon-document' //操作日志\n\n      },\n      activePath: '',\n      addTabsValue: '/dashboardover',\n      addTabs: [{\n        name: '/dashboardover',\n        title: '概览'\n      }],\n      tabTitle: ''\n    };\n  },\n\n  created() {\n    this.getMenusList();\n    this.activePath = window.sessionStorage.getItem('activePath'); // 初始时从sessionStorage里取出刷新页面前已存储的展示的tab页信息\n\n    const sessionTab = window.sessionStorage.getItem('addTabs');\n\n    if (sessionTab) {\n      if (sessionTab.addTabs.length != 0 && sessionTab.addTabsPath.length != 0) {\n        for (let i = 0; i < sessionTab.addTabs.length; i++) {\n          this.addTabs.push({\n            name: sessionTab.addTabs[i].name,\n            title: sessionTab.addTabs[i].title\n          });\n        }\n\n        this.addTabsValue = sessionTab.currActiveTabs;\n        this.$router.push({\n          path: this.addTabsValue\n        });\n      }\n    }\n  },\n\n  methods: {\n    async getMenusList() {\n      const {\n        data: res\n      } = await this.$axios.get('menus');\n      if (res.meta.status !== 200) return this.$message.error('获取侧边菜单失败');\n      this.menuslist = res.data;\n    },\n\n    savePath(paths) {\n      window.sessionStorage.setItem('activePath', '/' + paths.path);\n      this.activePath = '/' + paths.path; //   获取存储需要生成的tabs信息\n\n      this.tabTitle = paths.authName; //   console.log(paths)\n    },\n\n    // 选中tabs事件\n    pitchTabs(pitch) {\n      this.addTabsValue = pitch.name;\n      this.$router.push({\n        path: this.addTabsValue\n      });\n    },\n\n    // 移除tabs\n    removeTab(removes) {\n      if (removes === '/home' || removes === '/dashboardover') return;\n    }\n\n  },\n  watch: {\n    $route(to, from) {\n      var flag = false;\n\n      for (let i = 0; i < this.addTabs.length; i++) {\n        if (to.path === this.addTabs[i].name) {\n          this.addTabsValue = this.addTabs[i].name;\n          flag = true;\n          break;\n        }\n      }\n\n      if (!flag) {\n        let name = to.path;\n        console.log(to);\n        let title = this.tabTitle;\n        this.addTabs.push({\n          name,\n          title\n        });\n        this.addTabsValue = name;\n      }\n    }\n\n  },\n\n  mounted() {\n    // 将已经打开tab页面信息存储到sessionStorage里\n    window.addEventListener('beforeunload', e => {\n      sessionStorage.setItem('addTabs', JSON.stringify({\n        addTabs: this.addTabs.filter(item => item.name != '/dashboardover'),\n        addTabsPath: this.addTabs.filter(item => item.name !== '/dashboardover'),\n        currActiveTabs: this.addTabsValue\n      }));\n    });\n  }\n\n};","map":{"version":3,"mappings":"AAsCA;EACAA;IACA;MACAC,aADA;MAEAC;QACA,4BADA;QACA;QACA,oBAFA;QAEA;QACA,6BAHA;QAGA;QACA,8BAJA;QAIA;QACA,sBALA;QAKA;QACA,mBANA;QAMA;QACA,yBAPA;QAOA;QACA,6BARA;QAQA;QACA,wBATA;QASA;QACA,wBAVA;QAUA;QACA,kCAXA;QAWA;QACA,sBAZA;QAYA;QACA,qBAbA;QAaA;QACA,uBAdA;QAcA;QACA,uBAfA,CAeA;;MAfA,CAFA;MAmBAC,cAnBA;MAoBAC,8BApBA;MAqBAC;QAAAC;QAAAC;MAAA,EArBA;MAsBAC;IAtBA;EAwBA,CA1BA;;EA2BAC;IACA;IACA,8DAFA,CAGA;;IACA;;IACA;MACA,IACAC,kCACAA,kCAFA,EAGA;QACA;UACA;YACAJ,gCADA;YAEAC;UAFA;QAIA;;QACA;QACA;UAAAI;QAAA;MACA;IACA;EACA,CA/CA;;EAgDAC;IACA;MACA;QAAAZ;MAAA;MACA,6BACA;MACA;IACA,CANA;;IAOAa;MACAC;MACA,mCAFA,CAGA;;MACA,+BAJA,CAKA;IACA,CAbA;;IAcA;IACAC;MACA;MACA;QAAAJ;MAAA;IACA,CAlBA;;IAmBA;IACAK;MACA;IACA;;EAtBA,CAhDA;EAwEAC;IACAC;MACA;;MACA;QACA;UACA;UACAC;UACA;QACA;MACA;;MACA;QACA;QACAC;QACA;QACA;UAAAd;UAAAC;QAAA;QACA;MACA;IACA;;EAjBA,CAxEA;;EA2FAc;IACA;IACAP;MACAQ,uBACA,SADA,EAEAC;QACAlB,mEADA;QAEAmB,iCACAC,sCADA,CAFA;QAKAC;MALA,EAFA;IAUA,CAXA;EAYA;;AAzGA","names":["data","menuslist","elicon","activePath","addTabsValue","addTabs","name","title","tabTitle","created","sessionTab","path","methods","savePath","window","pitchTabs","removeTab","watch","$route","flag","console","mounted","sessionStorage","JSON","addTabsPath","item","currActiveTabs"],"sourceRoot":"src/views/home","sources":["Home.vue"],"sourcesContent":["<template>\n  <el-container class=\"home-container\">\n    <el-aside width=\"200px\">\n      <el-menu background-color=\"#333744\" text-color=\"#fff\" :unique-opened=\"true\" router :default-active=\"activePath\">\n        <img src=\"@/assets/JBLOGO.png\" alt=\"\">\n        <!-- 一级菜单 -->\n        <el-submenu v-for=\"item in menuslist\" :key=\"item.id\" :index=\"item.id === '101' ? '/' + item.path : item.id + ''\">\n          <!-- 一级菜单模板区域 -->\n          <template slot=\"title\">\n            <i :class=\"elicon[item.id]\"></i>\n            <span slot=\"title\">{{item.authName}}</span>\n          </template>\n          <!-- 二级菜单 -->\n          <el-menu-item :index=\"'/' + item1.path\" v-for=\"item1 in item.children\" :key=\"item1.id\" @click=\"savePath(item1)\">\n            <template slot=\"title\">\n              <i :class=\"elicon[item1.id]\"></i>\n              <span slot=\"title\">{{item1.authName}}</span>\n            </template>\n          </el-menu-item>\n        </el-submenu>\n      </el-menu>\n    </el-aside>\n    <el-container>\n      <el-header>\n        <h3>this H3</h3>\n      </el-header>\n      <el-main>\n        <el-tabs v-model=\"addTabsValue\" type=\"card\" closable @tab-remove=\"removeTab\" @tab-click=\"pitchTabs\">\n          <el-tab-pane v-for=\"tabs in addTabs\" :key=\"tabs.name\" :label=\"tabs.title\" :name=\"tabs.name\">\n            <router-view></router-view>\n          </el-tab-pane>\n        </el-tabs>\n      </el-main>\n    </el-container>\n  </el-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      menuslist: [],\n      elicon: {\n        101: 'el-icon-data-analysis', //首页概览\n        112: 'el-icon-goods', //商品\n        113: 'el-icon-shopping-bag-2', //商品列表\n        123: 'el-icon-document-remove', //订单\n        124: 'el-icon-tickets', //订单列表\n        134: 'el-icon-user', //客户\n        135: 'el-icon-user-solid', //客户列表\n        136: 'el-icon-collection-tag', //客户标签\n        145: 'el-icon-data-line', //数据\n        146: 'el-icon-pie-chart', //数据概览\n        147: 'el-icon-c-scale-to-original', //客流分析\n        156: 'el-icon-setting', //设置\n        157: 'el-icon-s-home', //店铺信息\n        158: 'el-icon-s-custom', //账号权限\n        159: 'el-icon-document', //操作日志\n      },\n      activePath: '',\n      addTabsValue: '/dashboardover',\n      addTabs: [{ name: '/dashboardover', title: '概览' }],\n      tabTitle: '',\n    }\n  },\n  created() {\n    this.getMenusList()\n    this.activePath = window.sessionStorage.getItem('activePath')\n    // 初始时从sessionStorage里取出刷新页面前已存储的展示的tab页信息\n    const sessionTab = window.sessionStorage.getItem('addTabs')\n    if (sessionTab) {\n      if (\n        sessionTab.addTabs.length != 0 &&\n        sessionTab.addTabsPath.length != 0\n      ) {\n        for (let i = 0; i < sessionTab.addTabs.length; i++) {\n          this.addTabs.push({\n            name: sessionTab.addTabs[i].name,\n            title: sessionTab.addTabs[i].title,\n          })\n        }\n        this.addTabsValue = sessionTab.currActiveTabs\n        this.$router.push({path: this.addTabsValue})\n      }\n    }\n  },\n  methods: {\n    async getMenusList() {\n      const { data: res } = await this.$axios.get('menus')\n      if (res.meta.status !== 200)\n        return this.$message.error('获取侧边菜单失败')\n      this.menuslist = res.data\n    },\n    savePath(paths) {\n      window.sessionStorage.setItem('activePath', '/' + paths.path)\n      this.activePath = '/' + paths.path\n      //   获取存储需要生成的tabs信息\n      this.tabTitle = paths.authName\n      //   console.log(paths)\n    },\n    // 选中tabs事件\n    pitchTabs(pitch) {\n      this.addTabsValue = pitch.name\n      this.$router.push({ path: this.addTabsValue })\n    },\n    // 移除tabs\n    removeTab(removes) {\n      if (removes === '/home' || removes === '/dashboardover') return\n    },\n  },\n  watch: {\n    $route(to, from) {\n      var flag = false\n      for (let i = 0; i < this.addTabs.length; i++) {\n        if (to.path === this.addTabs[i].name) {\n          this.addTabsValue = this.addTabs[i].name\n          flag = true\n          break\n        }\n      }\n      if (!flag) {\n        let name = to.path\n        console.log(to)\n        let title = this.tabTitle\n        this.addTabs.push({ name, title })\n        this.addTabsValue = name\n      }\n    },\n  },\n  mounted() {\n    // 将已经打开tab页面信息存储到sessionStorage里\n    window.addEventListener('beforeunload', (e) => {\n      sessionStorage.setItem(\n        'addTabs',\n        JSON.stringify({\n          addTabs: this.addTabs.filter((item) => item.name != '/dashboardover'),\n          addTabsPath: this.addTabs.filter(\n            (item) => item.name !== '/dashboardover'\n          ),\n          currActiveTabs: this.addTabsValue,\n        })\n      )\n    })\n  },\n}\n</script>\n\n<style lang=\"less\" scoped>\n.home-container {\n  margin: 0;\n  padding: 0;\n  height: 100%;\n}\n.el-menu {\n  border-right: none;\n}\n.sidenav {\n  width: 100%;\n}\n::v-deep .el-submenu__title {\n  display: flex;\n  align-items: center;\n}\nimg {\n  height: 50px;\n}\n.el-aside {\n  background-color: #323744;\n}\n.el-submenu [class^='el-icon-'] {\n  transform: translateY(-2px);\n}\n.clear {\n}\n</style>"]},"metadata":{},"sourceType":"module"}