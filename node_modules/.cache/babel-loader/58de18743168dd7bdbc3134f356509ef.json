{"ast":null,"code":"export default {\n  data() {\n    return {\n      menuslist: [],\n      isCollapse: false,\n      elicon: {\n        101: 'el-icon-data-analysis',\n        //首页概览\n        112: 'el-icon-goods',\n        //商品\n        113: 'el-icon-shopping-bag-2',\n        //商品列表\n        123: 'el-icon-document-remove',\n        //订单\n        124: 'el-icon-tickets',\n        //订单列表\n        134: 'el-icon-user',\n        //客户\n        135: 'el-icon-user-solid',\n        //客户列表\n        136: 'el-icon-collection-tag',\n        //客户标签\n        145: 'el-icon-data-line',\n        //数据\n        146: 'el-icon-pie-chart',\n        //数据概览\n        147: 'el-icon-c-scale-to-original',\n        //客流分析\n        156: 'el-icon-setting',\n        //设置\n        157: 'el-icon-s-home',\n        //店铺信息\n        158: 'el-icon-s-custom',\n        //账号权限\n        159: 'el-icon-document' //操作日志\n\n      },\n      activePath: '',\n      addTabsValue: '/dashboardover',\n      addTabs: [{\n        name: '/dashboardover',\n        title: '概览'\n      }],\n      tabTitle: ''\n    };\n  },\n\n  created() {\n    this.getMenusList();\n    this.activePath = window.sessionStorage.getItem('activePath'); // 初始时从sessionStorage里取出刷新页面前已存储的展示的tab页信息\n\n    const sessionTab = JSON.parse(window.sessionStorage.getItem('addTabs'));\n\n    if (sessionTab) {\n      if (sessionTab.addTabs.length != 0 && sessionTab.addTabsPath.length != 0) {\n        for (let i = 0; i < sessionTab.addTabs.length; i++) {\n          this.addTabs.push({\n            name: sessionTab.addTabs[i].name,\n            title: sessionTab.addTabs[i].title\n          });\n        }\n\n        this.addTabsValue = sessionTab.currActiveTabs;\n        this.$router.push({\n          path: this.addTabsValue\n        });\n      } else {\n        this.activePath = sessionTab.currActiveTabs;\n      }\n    }\n  },\n\n  methods: {\n    async getMenusList() {\n      const {\n        data: res\n      } = await this.$axios.get('menus');\n      if (res.meta.status !== 200) return this.$message.error('获取侧边菜单失败');\n      this.menuslist = res.data; //   this.$router.push({path: this.addTabsValue})\n    },\n\n    // 展开或者折叠侧边栏\n    collapseOrSpread() {\n      this.isCollapse = !this.isCollapse;\n    },\n\n    savePath(paths) {\n      // this.addTabsValue = '/' + paths.path\n      //   console.log(sessionSavePath)\n      window.sessionStorage.setItem('activePath', this.addTabsValue);\n      this.activePath = '/' + paths.path; //   存储需要生成的tabs的title信息\n\n      this.tabTitle = paths.authName;\n    },\n\n    // 选中tabs事件\n    pitchTabs(pitch) {\n      this.addTabsValue = pitch.name;\n      this.activePath = pitch.name;\n      window.sessionStorage.setItem('activePath', pitch.name);\n      this.$router.push({\n        path: this.addTabsValue\n      });\n    },\n\n    // 移除tabs\n    removeTab(removes) {\n      if (removes === '/home' || removes === '/dashboardover') return;\n      let tabs = this.addTabs;\n      let activeName = this.addTabsValue; // 处理当前激活tab页移除事件\n\n      if (activeName === removes) {\n        tabs.forEach((tab, index) => {\n          if (tab.name === removes) {\n            let nextTab = tabs[index + 1] || tabs[index - 1];\n\n            if (nextTab) {\n              activeName = nextTab.name;\n            }\n          }\n        });\n      }\n\n      this.addTabsValue = activeName;\n      this.activePath = activeName; //   处理移除其他tab页面，使用filter方法返回符合条件的所有元素的新数组\n\n      this.addTabs = tabs.filter(tab => tab.name !== removes);\n      this.$router.push({\n        path: this.addTabsValue\n      });\n    }\n\n  },\n  watch: {\n    $route(to, from) {\n      //设置一个变量flag，用来判断点击的menu对应的tab页面是否已打开\n      var flag = false; //遍历已打开tab的数组，判断点击的menu的tab是否已打开\n\n      for (let i = 0; i < this.addTabs.length; i++) {\n        if (to.path === this.addTabs[i].name) {\n          //如果发现点击的menu对应tab已打开，那么激活该tab\n          this.addTabsValue = this.addTabs[i].name; //将变量flag设为true\n\n          flag = true; //跳出\n\n          break;\n        }\n      } // !flag取反为true，执行if语句\n\n\n      if (!flag) {\n        let name = to.path;\n        let title = this.tabTitle; //将需要添加的tab信息push进tabs数组里\n\n        this.addTabs.push({\n          name,\n          title\n        }); //将点击的menu，对应的路由地址传给tabs\n\n        this.addTabsValue = name;\n      }\n    }\n\n  },\n\n  mounted() {\n    // 将已经打开tab页面信息存储到sessionStorage里\n    window.addEventListener('beforeunload', e => {\n      sessionStorage.setItem('addTabs', JSON.stringify({\n        addTabs: this.addTabs.filter(item => item.name != '/dashboardover'),\n        addTabsPath: this.addTabs.filter(item => item.name !== '/dashboardover'),\n        currActiveTabs: this.addTabsValue\n      }));\n    });\n  }\n\n};","map":{"version":3,"mappings":"AA0DA;EACAA;IACA;MACAC,aADA;MAEAC,iBAFA;MAGAC;QACA,4BADA;QACA;QACA,oBAFA;QAEA;QACA,6BAHA;QAGA;QACA,8BAJA;QAIA;QACA,sBALA;QAKA;QACA,mBANA;QAMA;QACA,yBAPA;QAOA;QACA,6BARA;QAQA;QACA,wBATA;QASA;QACA,wBAVA;QAUA;QACA,kCAXA;QAWA;QACA,sBAZA;QAYA;QACA,qBAbA;QAaA;QACA,uBAdA;QAcA;QACA,uBAfA,CAeA;;MAfA,CAHA;MAoBAC,cApBA;MAqBAC,8BArBA;MAsBAC;QAAAC;QAAAC;MAAA,EAtBA;MAuBAC;IAvBA;EAyBA,CA3BA;;EA4BAC;IACA;IACA,8DAFA,CAGA;;IACA;;IACA;MACA,IACAC,kCACAA,kCAFA,EAGA;QACA;UACA;YACAJ,gCADA;YAEAC;UAFA;QAIA;;QACA;QACA;UAAAI;QAAA;MACA,CAZA,MAYA;QACA;MACA;IACA;EACA,CAlDA;;EAmDAC;IACA;MACA;QAAAb;MAAA;MACA,6BACA;MACA,0BAJA,CAKA;IACA,CAPA;;IAQA;IACAc;MACA;IACA,CAXA;;IAYAC;MACA;MACA;MACAC;MACA,mCAJA,CAKA;;MACA;IACA,CAnBA;;IAoBA;IACAC;MACA;MACA;MACAD;MACA;QAAAJ;MAAA;IACA,CA1BA;;IA2BA;IACAM;MACA;MACA;MACA,mCAHA,CAIA;;MACA;QACAC;UACA;YACA;;YACA;cACAC;YACA;UACA;QACA,CAPA;MAQA;;MACA;MACA,6BAhBA,CAiBA;;MACA;MACA;QAAAR;MAAA;IACA;;EAhDA,CAnDA;EAqGAS;IACAC;MACA;MACA,iBAFA,CAGA;;MACA;QACA;UACA;UACA,yCAFA,CAGA;;UACAC,YAJA,CAKA;;UACA;QACA;MACA,CAbA,CAcA;;;MACA;QACA;QACA,0BAFA,CAGA;;QACA;UAAAhB;UAAAC;QAAA,GAJA,CAKA;;QACA;MACA;IACA;;EAxBA,CArGA;;EA+HAgB;IACA;IACAR;MACAS,uBACA,SADA,EAEAC;QACApB,mEADA;QAEAqB,iCACAC,sCADA,CAFA;QAKAC;MALA,EAFA;IAUA,CAXA;EAYA;;AA7IA","names":["data","menuslist","isCollapse","elicon","activePath","addTabsValue","addTabs","name","title","tabTitle","created","sessionTab","path","methods","collapseOrSpread","savePath","window","pitchTabs","removeTab","tabs","activeName","watch","$route","flag","mounted","sessionStorage","JSON","addTabsPath","item","currActiveTabs"],"sourceRoot":"src/views/home","sources":["Home.vue"],"sourcesContent":["<template>\n  <el-container class=\"home-container\">\n    <el-aside :width=\"isCollapse ? '64px' : '200px'\">\n      <el-menu background-color=\"#333744\" text-color=\"#fff\" :collapse=\"isCollapse\" :unique-opened=\"true\" router :default-active=\"activePath\" :collapse-transition=\"false\">\n        <span class=\"logo-img\">\n          <img src=\"@/assets/logoB.png\" alt=\"\">\n          <h3 v-show=\"!isCollapse\">MINOR</h3>\n        </span>\n        <!-- 一级菜单 -->\n        <el-menu-item>概览</el-menu-item>\n        <el-submenu v-for=\"item in menuslist\" :key=\"item.id\" :index=\"item.id === '101' ? '/dashboardover' : item.id + ''\">\n          <!-- 一级菜单模板区域 -->\n          <template slot=\"title\">\n            <i :class=\"elicon[item.id]\"></i>\n            <span slot=\"title\">{{item.authName}}</span>\n          </template>\n          \n          <!-- 二级菜单 -->\n          <el-menu-item :index=\"'/' + item1.path\" v-for=\"item1 in item.children\" :key=\"item1.id\" @click=\"savePath(item1)\">\n            <template slot=\"title\">\n              <i :class=\"elicon[item1.id]\"></i>\n              <span slot=\"title\">{{item1.authName}}</span>\n            </template>\n          </el-menu-item>\n        </el-submenu>\n      </el-menu>\n    </el-aside>\n    <el-container>\n      <!-- 头部区域 -->\n      <el-header class=\"headersty\">\n        <el-row>\n          <el-col :span=\"8\">\n            <span :class=\"[isCollapse ? 'el-icon-s-unfold' : 'el-icon-s-fold', 'spreader']\" @click=\"collapseOrSpread\"></span>\n            <!-- 导航条-面包屑 -->\n            <el-breadcrumb separator=\"/\">\n              <el-breadcrumb-item :to=\"{ path: '/home' }\">概览</el-breadcrumb-item>\n              <el-breadcrumb-item>活动管理</el-breadcrumb-item>\n            </el-breadcrumb>\n          </el-col>\n          <el-col :span=\"8\">\n\n          </el-col>\n        </el-row>\n\n      </el-header>\n      <!-- 主体内容区域 -->\n      <el-main>\n        <el-tabs v-model=\"addTabsValue\" type=\"card\" closable @tab-remove=\"removeTab\" @tab-click=\"pitchTabs\">\n          <el-tab-pane v-for=\"tabs in addTabs\" :key=\"tabs.name\" :label=\"tabs.title\" :name=\"tabs.name\">\n            <router-view></router-view>\n          </el-tab-pane>\n        </el-tabs>\n      </el-main>\n    </el-container>\n  </el-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      menuslist: [],\n      isCollapse: false,\n      elicon: {\n        101: 'el-icon-data-analysis', //首页概览\n        112: 'el-icon-goods', //商品\n        113: 'el-icon-shopping-bag-2', //商品列表\n        123: 'el-icon-document-remove', //订单\n        124: 'el-icon-tickets', //订单列表\n        134: 'el-icon-user', //客户\n        135: 'el-icon-user-solid', //客户列表\n        136: 'el-icon-collection-tag', //客户标签\n        145: 'el-icon-data-line', //数据\n        146: 'el-icon-pie-chart', //数据概览\n        147: 'el-icon-c-scale-to-original', //客流分析\n        156: 'el-icon-setting', //设置\n        157: 'el-icon-s-home', //店铺信息\n        158: 'el-icon-s-custom', //账号权限\n        159: 'el-icon-document', //操作日志\n      },\n      activePath: '',\n      addTabsValue: '/dashboardover',\n      addTabs: [{ name: '/dashboardover', title: '概览' }],\n      tabTitle: '',\n    }\n  },\n  created() {\n    this.getMenusList()\n    this.activePath = window.sessionStorage.getItem('activePath')\n    // 初始时从sessionStorage里取出刷新页面前已存储的展示的tab页信息\n    const sessionTab = JSON.parse(window.sessionStorage.getItem('addTabs'))\n    if (sessionTab) {\n      if (\n        sessionTab.addTabs.length != 0 &&\n        sessionTab.addTabsPath.length != 0\n      ) {\n        for (let i = 0; i < sessionTab.addTabs.length; i++) {\n          this.addTabs.push({\n            name: sessionTab.addTabs[i].name,\n            title: sessionTab.addTabs[i].title,\n          })\n        }\n        this.addTabsValue = sessionTab.currActiveTabs\n        this.$router.push({ path: this.addTabsValue })\n      } else {\n        this.activePath = sessionTab.currActiveTabs\n      }\n    }\n  },\n  methods: {\n    async getMenusList() {\n      const { data: res } = await this.$axios.get('menus')\n      if (res.meta.status !== 200)\n        return this.$message.error('获取侧边菜单失败')\n      this.menuslist = res.data\n      //   this.$router.push({path: this.addTabsValue})\n    },\n    // 展开或者折叠侧边栏\n    collapseOrSpread() {\n      this.isCollapse = !this.isCollapse\n    },\n    savePath(paths) {\n      // this.addTabsValue = '/' + paths.path\n      //   console.log(sessionSavePath)\n      window.sessionStorage.setItem('activePath', this.addTabsValue)\n      this.activePath = '/' + paths.path\n      //   存储需要生成的tabs的title信息\n      this.tabTitle = paths.authName\n    },\n    // 选中tabs事件\n    pitchTabs(pitch) {\n      this.addTabsValue = pitch.name\n      this.activePath = pitch.name\n      window.sessionStorage.setItem('activePath', pitch.name)\n      this.$router.push({ path: this.addTabsValue })\n    },\n    // 移除tabs\n    removeTab(removes) {\n      if (removes === '/home' || removes === '/dashboardover') return\n      let tabs = this.addTabs\n      let activeName = this.addTabsValue\n      // 处理当前激活tab页移除事件\n      if (activeName === removes) {\n        tabs.forEach((tab, index) => {\n          if (tab.name === removes) {\n            let nextTab = tabs[index + 1] || tabs[index - 1]\n            if (nextTab) {\n              activeName = nextTab.name\n            }\n          }\n        })\n      }\n      this.addTabsValue = activeName\n      this.activePath = activeName\n      //   处理移除其他tab页面，使用filter方法返回符合条件的所有元素的新数组\n      this.addTabs = tabs.filter((tab) => tab.name !== removes)\n      this.$router.push({ path: this.addTabsValue })\n    },\n  },\n  watch: {\n    $route(to, from) {\n      //设置一个变量flag，用来判断点击的menu对应的tab页面是否已打开\n      var flag = false\n      //遍历已打开tab的数组，判断点击的menu的tab是否已打开\n      for (let i = 0; i < this.addTabs.length; i++) {\n        if (to.path === this.addTabs[i].name) {\n          //如果发现点击的menu对应tab已打开，那么激活该tab\n          this.addTabsValue = this.addTabs[i].name\n          //将变量flag设为true\n          flag = true\n          //跳出\n          break\n        }\n      }\n      // !flag取反为true，执行if语句\n      if (!flag) {\n        let name = to.path\n        let title = this.tabTitle\n        //将需要添加的tab信息push进tabs数组里\n        this.addTabs.push({ name, title })\n        //将点击的menu，对应的路由地址传给tabs\n        this.addTabsValue = name\n      }\n    },\n  },\n  mounted() {\n    // 将已经打开tab页面信息存储到sessionStorage里\n    window.addEventListener('beforeunload', (e) => {\n      sessionStorage.setItem(\n        'addTabs',\n        JSON.stringify({\n          addTabs: this.addTabs.filter((item) => item.name != '/dashboardover'),\n          addTabsPath: this.addTabs.filter(\n            (item) => item.name !== '/dashboardover'\n          ),\n          currActiveTabs: this.addTabsValue,\n        })\n      )\n    })\n  },\n}\n</script>\n\n<style lang=\"less\" scoped>\n.home-container {\n  margin: 0;\n  padding: 0;\n  height: 100%;\n}\n.el-menu {\n  border-right: none;\n}\n.sidenav {\n  width: 100%;\n}\n::v-deep .el-submenu__title {\n  display: flex;\n  align-items: center;\n}\n.logo-img {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  img {\n    height: 40px;\n    margin: 0 4px 0 0;\n  }\n  h3 {\n    color: #eee;\n    font-size: 20px;\n    padding: 0;\n    margin: 0;\n    // height: 40px;\n  }\n}\n.el-aside {\n  background-color: #323744;\n}\n.el-submenu [class^='el-icon-'] {\n  transform: translateY(-2px);\n}\n.el-header {\n  height: 50px !important;\n  border-bottom: 1px solid #eee;\n  padding: 0 10px;\n}\n.el-main {\n  padding: 2px;\n}\n.el-row {\n  height: 100%;\n  display: flex;\n  align-items: center;\n  .el-col {\n    display: flex;\n    align-items: center;\n    height: 100%;\n  }\n}\n.spreader {\n  height: 100%;\n  font-size: 18px;\n  display: flex;\n  align-items: center;\n  padding: 0 12px 0 2px;\n  cursor: pointer;\n}\n.el-breadcrumb {\n  line-height: normal;\n  display: flex;\n  align-items: center;\n}\n</style>"]},"metadata":{},"sourceType":"module"}