{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport PointerPath from './PointerPath.js';\nimport * as graphic from '../../util/graphic.js';\nimport { setStatesStylesFromModel, toggleHoverEmphasis } from '../../util/states.js';\nimport { createTextStyle, setLabelValueAnimation, animateLabelValue } from '../../label/labelStyle.js';\nimport ChartView from '../../view/Chart.js';\nimport { parsePercent, round, linearMap } from '../../util/number.js';\nimport Sausage from '../../util/shape/sausage.js';\nimport { createSymbol } from '../../util/symbol.js';\nimport ZRImage from 'zrender/lib/graphic/Image.js';\nimport { extend, isFunction, isString, isNumber } from 'zrender/lib/core/util.js';\nimport { setCommonECData } from '../../util/innerStore.js';\nimport { normalizeArcAngles } from 'zrender/lib/core/PathProxy.js';\n\nfunction parsePosition(seriesModel, api) {\n  var center = seriesModel.get('center');\n  var width = api.getWidth();\n  var height = api.getHeight();\n  var size = Math.min(width, height);\n  var cx = parsePercent(center[0], api.getWidth());\n  var cy = parsePercent(center[1], api.getHeight());\n  var r = parsePercent(seriesModel.get('radius'), size / 2);\n  return {\n    cx: cx,\n    cy: cy,\n    r: r\n  };\n}\n\nfunction formatLabel(value, labelFormatter) {\n  var label = value == null ? '' : value + '';\n\n  if (labelFormatter) {\n    if (isString(labelFormatter)) {\n      label = labelFormatter.replace('{value}', label);\n    } else if (isFunction(labelFormatter)) {\n      label = labelFormatter(value);\n    }\n  }\n\n  return label;\n}\n\nvar GaugeView =\n/** @class */\nfunction (_super) {\n  __extends(GaugeView, _super);\n\n  function GaugeView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = GaugeView.type;\n    return _this;\n  }\n\n  GaugeView.prototype.render = function (seriesModel, ecModel, api) {\n    this.group.removeAll();\n    var colorList = seriesModel.get(['axisLine', 'lineStyle', 'color']);\n    var posInfo = parsePosition(seriesModel, api);\n\n    this._renderMain(seriesModel, ecModel, api, colorList, posInfo);\n\n    this._data = seriesModel.getData();\n  };\n\n  GaugeView.prototype.dispose = function () {};\n\n  GaugeView.prototype._renderMain = function (seriesModel, ecModel, api, colorList, posInfo) {\n    var group = this.group;\n    var clockwise = seriesModel.get('clockwise');\n    var startAngle = -seriesModel.get('startAngle') / 180 * Math.PI;\n    var endAngle = -seriesModel.get('endAngle') / 180 * Math.PI;\n    var axisLineModel = seriesModel.getModel('axisLine');\n    var roundCap = axisLineModel.get('roundCap');\n    var MainPath = roundCap ? Sausage : graphic.Sector;\n    var showAxis = axisLineModel.get('show');\n    var lineStyleModel = axisLineModel.getModel('lineStyle');\n    var axisLineWidth = lineStyleModel.get('width');\n    var angles = [startAngle, endAngle];\n    normalizeArcAngles(angles, !clockwise);\n    startAngle = angles[0];\n    endAngle = angles[1];\n    var angleRangeSpan = endAngle - startAngle;\n    var prevEndAngle = startAngle;\n\n    for (var i = 0; showAxis && i < colorList.length; i++) {\n      // Clamp\n      var percent = Math.min(Math.max(colorList[i][0], 0), 1);\n      endAngle = startAngle + angleRangeSpan * percent;\n      var sector = new MainPath({\n        shape: {\n          startAngle: prevEndAngle,\n          endAngle: endAngle,\n          cx: posInfo.cx,\n          cy: posInfo.cy,\n          clockwise: clockwise,\n          r0: posInfo.r - axisLineWidth,\n          r: posInfo.r\n        },\n        silent: true\n      });\n      sector.setStyle({\n        fill: colorList[i][1]\n      });\n      sector.setStyle(lineStyleModel.getLineStyle( // Because we use sector to simulate arc\n      // so the properties for stroking are useless\n      ['color', 'width']));\n      group.add(sector);\n      prevEndAngle = endAngle;\n    }\n\n    var getColor = function (percent) {\n      // Less than 0\n      if (percent <= 0) {\n        return colorList[0][1];\n      }\n\n      var i;\n\n      for (i = 0; i < colorList.length; i++) {\n        if (colorList[i][0] >= percent && (i === 0 ? 0 : colorList[i - 1][0]) < percent) {\n          return colorList[i][1];\n        }\n      } // More than 1\n\n\n      return colorList[i - 1][1];\n    };\n\n    this._renderTicks(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth);\n\n    this._renderTitleAndDetail(seriesModel, ecModel, api, getColor, posInfo);\n\n    this._renderAnchor(seriesModel, posInfo);\n\n    this._renderPointer(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth);\n  };\n\n  GaugeView.prototype._renderTicks = function (seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth) {\n    var group = this.group;\n    var cx = posInfo.cx;\n    var cy = posInfo.cy;\n    var r = posInfo.r;\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var splitLineModel = seriesModel.getModel('splitLine');\n    var tickModel = seriesModel.getModel('axisTick');\n    var labelModel = seriesModel.getModel('axisLabel');\n    var splitNumber = seriesModel.get('splitNumber');\n    var subSplitNumber = tickModel.get('splitNumber');\n    var splitLineLen = parsePercent(splitLineModel.get('length'), r);\n    var tickLen = parsePercent(tickModel.get('length'), r);\n    var angle = startAngle;\n    var step = (endAngle - startAngle) / splitNumber;\n    var subStep = step / subSplitNumber;\n    var splitLineStyle = splitLineModel.getModel('lineStyle').getLineStyle();\n    var tickLineStyle = tickModel.getModel('lineStyle').getLineStyle();\n    var splitLineDistance = splitLineModel.get('distance');\n    var unitX;\n    var unitY;\n\n    for (var i = 0; i <= splitNumber; i++) {\n      unitX = Math.cos(angle);\n      unitY = Math.sin(angle); // Split line\n\n      if (splitLineModel.get('show')) {\n        var distance = splitLineDistance ? splitLineDistance + axisLineWidth : axisLineWidth;\n        var splitLine = new graphic.Line({\n          shape: {\n            x1: unitX * (r - distance) + cx,\n            y1: unitY * (r - distance) + cy,\n            x2: unitX * (r - splitLineLen - distance) + cx,\n            y2: unitY * (r - splitLineLen - distance) + cy\n          },\n          style: splitLineStyle,\n          silent: true\n        });\n\n        if (splitLineStyle.stroke === 'auto') {\n          splitLine.setStyle({\n            stroke: getColor(i / splitNumber)\n          });\n        }\n\n        group.add(splitLine);\n      } // Label\n\n\n      if (labelModel.get('show')) {\n        var distance = labelModel.get('distance') + splitLineDistance;\n        var label = formatLabel(round(i / splitNumber * (maxVal - minVal) + minVal), labelModel.get('formatter'));\n        var autoColor = getColor(i / splitNumber);\n        var textStyleX = unitX * (r - splitLineLen - distance) + cx;\n        var textStyleY = unitY * (r - splitLineLen - distance) + cy;\n        var rotateType = labelModel.get('rotate');\n        var rotate = 0;\n\n        if (rotateType === 'radial') {\n          rotate = -angle + 2 * Math.PI;\n\n          if (rotate > Math.PI / 2) {\n            rotate += Math.PI;\n          }\n        } else if (rotateType === 'tangential') {\n          rotate = -angle - Math.PI / 2;\n        } else if (isNumber(rotateType)) {\n          rotate = rotateType * Math.PI / 180;\n        }\n\n        if (rotate === 0) {\n          group.add(new graphic.Text({\n            style: createTextStyle(labelModel, {\n              text: label,\n              x: textStyleX,\n              y: textStyleY,\n              verticalAlign: unitY < -0.8 ? 'top' : unitY > 0.8 ? 'bottom' : 'middle',\n              align: unitX < -0.4 ? 'left' : unitX > 0.4 ? 'right' : 'center'\n            }, {\n              inheritColor: autoColor\n            }),\n            silent: true\n          }));\n        } else {\n          group.add(new graphic.Text({\n            style: createTextStyle(labelModel, {\n              text: label,\n              x: textStyleX,\n              y: textStyleY,\n              verticalAlign: 'middle',\n              align: 'center'\n            }, {\n              inheritColor: autoColor\n            }),\n            silent: true,\n            originX: textStyleX,\n            originY: textStyleY,\n            rotation: rotate\n          }));\n        }\n      } // Axis tick\n\n\n      if (tickModel.get('show') && i !== splitNumber) {\n        var distance = tickModel.get('distance');\n        distance = distance ? distance + axisLineWidth : axisLineWidth;\n\n        for (var j = 0; j <= subSplitNumber; j++) {\n          unitX = Math.cos(angle);\n          unitY = Math.sin(angle);\n          var tickLine = new graphic.Line({\n            shape: {\n              x1: unitX * (r - distance) + cx,\n              y1: unitY * (r - distance) + cy,\n              x2: unitX * (r - tickLen - distance) + cx,\n              y2: unitY * (r - tickLen - distance) + cy\n            },\n            silent: true,\n            style: tickLineStyle\n          });\n\n          if (tickLineStyle.stroke === 'auto') {\n            tickLine.setStyle({\n              stroke: getColor((i + j / subSplitNumber) / splitNumber)\n            });\n          }\n\n          group.add(tickLine);\n          angle += subStep;\n        }\n\n        angle -= subStep;\n      } else {\n        angle += step;\n      }\n    }\n  };\n\n  GaugeView.prototype._renderPointer = function (seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth) {\n    var group = this.group;\n    var oldData = this._data;\n    var oldProgressData = this._progressEls;\n    var progressList = [];\n    var showPointer = seriesModel.get(['pointer', 'show']);\n    var progressModel = seriesModel.getModel('progress');\n    var showProgress = progressModel.get('show');\n    var data = seriesModel.getData();\n    var valueDim = data.mapDimension('value');\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var valueExtent = [minVal, maxVal];\n    var angleExtent = [startAngle, endAngle];\n\n    function createPointer(idx, angle) {\n      var itemModel = data.getItemModel(idx);\n      var pointerModel = itemModel.getModel('pointer');\n      var pointerWidth = parsePercent(pointerModel.get('width'), posInfo.r);\n      var pointerLength = parsePercent(pointerModel.get('length'), posInfo.r);\n      var pointerStr = seriesModel.get(['pointer', 'icon']);\n      var pointerOffset = pointerModel.get('offsetCenter');\n      var pointerOffsetX = parsePercent(pointerOffset[0], posInfo.r);\n      var pointerOffsetY = parsePercent(pointerOffset[1], posInfo.r);\n      var pointerKeepAspect = pointerModel.get('keepAspect');\n      var pointer; // not exist icon type will be set 'rect'\n\n      if (pointerStr) {\n        pointer = createSymbol(pointerStr, pointerOffsetX - pointerWidth / 2, pointerOffsetY - pointerLength, pointerWidth, pointerLength, null, pointerKeepAspect);\n      } else {\n        pointer = new PointerPath({\n          shape: {\n            angle: -Math.PI / 2,\n            width: pointerWidth,\n            r: pointerLength,\n            x: pointerOffsetX,\n            y: pointerOffsetY\n          }\n        });\n      }\n\n      pointer.rotation = -(angle + Math.PI / 2);\n      pointer.x = posInfo.cx;\n      pointer.y = posInfo.cy;\n      return pointer;\n    }\n\n    function createProgress(idx, endAngle) {\n      var roundCap = progressModel.get('roundCap');\n      var ProgressPath = roundCap ? Sausage : graphic.Sector;\n      var isOverlap = progressModel.get('overlap');\n      var progressWidth = isOverlap ? progressModel.get('width') : axisLineWidth / data.count();\n      var r0 = isOverlap ? posInfo.r - progressWidth : posInfo.r - (idx + 1) * progressWidth;\n      var r = isOverlap ? posInfo.r : posInfo.r - idx * progressWidth;\n      var progress = new ProgressPath({\n        shape: {\n          startAngle: startAngle,\n          endAngle: endAngle,\n          cx: posInfo.cx,\n          cy: posInfo.cy,\n          clockwise: clockwise,\n          r0: r0,\n          r: r\n        }\n      });\n      isOverlap && (progress.z2 = maxVal - data.get(valueDim, idx) % maxVal);\n      return progress;\n    }\n\n    if (showProgress || showPointer) {\n      data.diff(oldData).add(function (idx) {\n        var val = data.get(valueDim, idx);\n\n        if (showPointer) {\n          var pointer = createPointer(idx, startAngle); // TODO hide pointer on NaN value?\n\n          graphic.initProps(pointer, {\n            rotation: -((isNaN(+val) ? angleExtent[0] : linearMap(val, valueExtent, angleExtent, true)) + Math.PI / 2)\n          }, seriesModel);\n          group.add(pointer);\n          data.setItemGraphicEl(idx, pointer);\n        }\n\n        if (showProgress) {\n          var progress = createProgress(idx, startAngle);\n          var isClip = progressModel.get('clip');\n          graphic.initProps(progress, {\n            shape: {\n              endAngle: linearMap(val, valueExtent, angleExtent, isClip)\n            }\n          }, seriesModel);\n          group.add(progress); // Add data index and series index for indexing the data by element\n          // Useful in tooltip\n\n          setCommonECData(seriesModel.seriesIndex, data.dataType, idx, progress);\n          progressList[idx] = progress;\n        }\n      }).update(function (newIdx, oldIdx) {\n        var val = data.get(valueDim, newIdx);\n\n        if (showPointer) {\n          var previousPointer = oldData.getItemGraphicEl(oldIdx);\n          var previousRotate = previousPointer ? previousPointer.rotation : startAngle;\n          var pointer = createPointer(newIdx, previousRotate);\n          pointer.rotation = previousRotate;\n          graphic.updateProps(pointer, {\n            rotation: -((isNaN(+val) ? angleExtent[0] : linearMap(val, valueExtent, angleExtent, true)) + Math.PI / 2)\n          }, seriesModel);\n          group.add(pointer);\n          data.setItemGraphicEl(newIdx, pointer);\n        }\n\n        if (showProgress) {\n          var previousProgress = oldProgressData[oldIdx];\n          var previousEndAngle = previousProgress ? previousProgress.shape.endAngle : startAngle;\n          var progress = createProgress(newIdx, previousEndAngle);\n          var isClip = progressModel.get('clip');\n          graphic.updateProps(progress, {\n            shape: {\n              endAngle: linearMap(val, valueExtent, angleExtent, isClip)\n            }\n          }, seriesModel);\n          group.add(progress); // Add data index and series index for indexing the data by element\n          // Useful in tooltip\n\n          setCommonECData(seriesModel.seriesIndex, data.dataType, newIdx, progress);\n          progressList[newIdx] = progress;\n        }\n      }).execute();\n      data.each(function (idx) {\n        var itemModel = data.getItemModel(idx);\n        var emphasisModel = itemModel.getModel('emphasis');\n        var focus = emphasisModel.get('focus');\n        var blurScope = emphasisModel.get('blurScope');\n        var emphasisDisabled = emphasisModel.get('disabled');\n\n        if (showPointer) {\n          var pointer = data.getItemGraphicEl(idx);\n          var symbolStyle = data.getItemVisual(idx, 'style');\n          var visualColor = symbolStyle.fill;\n\n          if (pointer instanceof ZRImage) {\n            var pathStyle = pointer.style;\n            pointer.useStyle(extend({\n              image: pathStyle.image,\n              x: pathStyle.x,\n              y: pathStyle.y,\n              width: pathStyle.width,\n              height: pathStyle.height\n            }, symbolStyle));\n          } else {\n            pointer.useStyle(symbolStyle);\n            pointer.type !== 'pointer' && pointer.setColor(visualColor);\n          }\n\n          pointer.setStyle(itemModel.getModel(['pointer', 'itemStyle']).getItemStyle());\n\n          if (pointer.style.fill === 'auto') {\n            pointer.setStyle('fill', getColor(linearMap(data.get(valueDim, idx), valueExtent, [0, 1], true)));\n          }\n\n          pointer.z2EmphasisLift = 0;\n          setStatesStylesFromModel(pointer, itemModel);\n          toggleHoverEmphasis(pointer, focus, blurScope, emphasisDisabled);\n        }\n\n        if (showProgress) {\n          var progress = progressList[idx];\n          progress.useStyle(data.getItemVisual(idx, 'style'));\n          progress.setStyle(itemModel.getModel(['progress', 'itemStyle']).getItemStyle());\n          progress.z2EmphasisLift = 0;\n          setStatesStylesFromModel(progress, itemModel);\n          toggleHoverEmphasis(progress, focus, blurScope, emphasisDisabled);\n        }\n      });\n      this._progressEls = progressList;\n    }\n  };\n\n  GaugeView.prototype._renderAnchor = function (seriesModel, posInfo) {\n    var anchorModel = seriesModel.getModel('anchor');\n    var showAnchor = anchorModel.get('show');\n\n    if (showAnchor) {\n      var anchorSize = anchorModel.get('size');\n      var anchorType = anchorModel.get('icon');\n      var offsetCenter = anchorModel.get('offsetCenter');\n      var anchorKeepAspect = anchorModel.get('keepAspect');\n      var anchor = createSymbol(anchorType, posInfo.cx - anchorSize / 2 + parsePercent(offsetCenter[0], posInfo.r), posInfo.cy - anchorSize / 2 + parsePercent(offsetCenter[1], posInfo.r), anchorSize, anchorSize, null, anchorKeepAspect);\n      anchor.z2 = anchorModel.get('showAbove') ? 1 : 0;\n      anchor.setStyle(anchorModel.getModel('itemStyle').getItemStyle());\n      this.group.add(anchor);\n    }\n  };\n\n  GaugeView.prototype._renderTitleAndDetail = function (seriesModel, ecModel, api, getColor, posInfo) {\n    var _this = this;\n\n    var data = seriesModel.getData();\n    var valueDim = data.mapDimension('value');\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var contentGroup = new graphic.Group();\n    var newTitleEls = [];\n    var newDetailEls = [];\n    var hasAnimation = seriesModel.isAnimationEnabled();\n    var showPointerAbove = seriesModel.get(['pointer', 'showAbove']);\n    data.diff(this._data).add(function (idx) {\n      newTitleEls[idx] = new graphic.Text({\n        silent: true\n      });\n      newDetailEls[idx] = new graphic.Text({\n        silent: true\n      });\n    }).update(function (idx, oldIdx) {\n      newTitleEls[idx] = _this._titleEls[oldIdx];\n      newDetailEls[idx] = _this._detailEls[oldIdx];\n    }).execute();\n    data.each(function (idx) {\n      var itemModel = data.getItemModel(idx);\n      var value = data.get(valueDim, idx);\n      var itemGroup = new graphic.Group();\n      var autoColor = getColor(linearMap(value, [minVal, maxVal], [0, 1], true));\n      var itemTitleModel = itemModel.getModel('title');\n\n      if (itemTitleModel.get('show')) {\n        var titleOffsetCenter = itemTitleModel.get('offsetCenter');\n        var titleX = posInfo.cx + parsePercent(titleOffsetCenter[0], posInfo.r);\n        var titleY = posInfo.cy + parsePercent(titleOffsetCenter[1], posInfo.r);\n        var labelEl = newTitleEls[idx];\n        labelEl.attr({\n          z2: showPointerAbove ? 0 : 2,\n          style: createTextStyle(itemTitleModel, {\n            x: titleX,\n            y: titleY,\n            text: data.getName(idx),\n            align: 'center',\n            verticalAlign: 'middle'\n          }, {\n            inheritColor: autoColor\n          })\n        });\n        itemGroup.add(labelEl);\n      }\n\n      var itemDetailModel = itemModel.getModel('detail');\n\n      if (itemDetailModel.get('show')) {\n        var detailOffsetCenter = itemDetailModel.get('offsetCenter');\n        var detailX = posInfo.cx + parsePercent(detailOffsetCenter[0], posInfo.r);\n        var detailY = posInfo.cy + parsePercent(detailOffsetCenter[1], posInfo.r);\n        var width = parsePercent(itemDetailModel.get('width'), posInfo.r);\n        var height = parsePercent(itemDetailModel.get('height'), posInfo.r);\n        var detailColor = seriesModel.get(['progress', 'show']) ? data.getItemVisual(idx, 'style').fill : autoColor;\n        var labelEl = newDetailEls[idx];\n        var formatter_1 = itemDetailModel.get('formatter');\n        labelEl.attr({\n          z2: showPointerAbove ? 0 : 2,\n          style: createTextStyle(itemDetailModel, {\n            x: detailX,\n            y: detailY,\n            text: formatLabel(value, formatter_1),\n            width: isNaN(width) ? null : width,\n            height: isNaN(height) ? null : height,\n            align: 'center',\n            verticalAlign: 'middle'\n          }, {\n            inheritColor: detailColor\n          })\n        });\n        setLabelValueAnimation(labelEl, {\n          normal: itemDetailModel\n        }, value, function (value) {\n          return formatLabel(value, formatter_1);\n        });\n        hasAnimation && animateLabelValue(labelEl, idx, data, seriesModel, {\n          getFormattedLabel: function (labelDataIndex, status, dataType, labelDimIndex, fmt, extendParams) {\n            return formatLabel(extendParams ? extendParams.interpolatedValue : value, formatter_1);\n          }\n        });\n        itemGroup.add(labelEl);\n      }\n\n      contentGroup.add(itemGroup);\n    });\n    this.group.add(contentGroup);\n    this._titleEls = newTitleEls;\n    this._detailEls = newDetailEls;\n  };\n\n  GaugeView.type = 'gauge';\n  return GaugeView;\n}(ChartView);\n\nexport default GaugeView;","map":{"version":3,"names":["__extends","PointerPath","graphic","setStatesStylesFromModel","toggleHoverEmphasis","createTextStyle","setLabelValueAnimation","animateLabelValue","ChartView","parsePercent","round","linearMap","Sausage","createSymbol","ZRImage","extend","isFunction","isString","isNumber","setCommonECData","normalizeArcAngles","parsePosition","seriesModel","api","center","get","width","getWidth","height","getHeight","size","Math","min","cx","cy","r","formatLabel","value","labelFormatter","label","replace","GaugeView","_super","_this","apply","arguments","type","prototype","render","ecModel","group","removeAll","colorList","posInfo","_renderMain","_data","getData","dispose","clockwise","startAngle","PI","endAngle","axisLineModel","getModel","roundCap","MainPath","Sector","showAxis","lineStyleModel","axisLineWidth","angles","angleRangeSpan","prevEndAngle","i","length","percent","max","sector","shape","r0","silent","setStyle","fill","getLineStyle","add","getColor","_renderTicks","_renderTitleAndDetail","_renderAnchor","_renderPointer","minVal","maxVal","splitLineModel","tickModel","labelModel","splitNumber","subSplitNumber","splitLineLen","tickLen","angle","step","subStep","splitLineStyle","tickLineStyle","splitLineDistance","unitX","unitY","cos","sin","distance","splitLine","Line","x1","y1","x2","y2","style","stroke","autoColor","textStyleX","textStyleY","rotateType","rotate","Text","text","x","y","verticalAlign","align","inheritColor","originX","originY","rotation","j","tickLine","oldData","oldProgressData","_progressEls","progressList","showPointer","progressModel","showProgress","data","valueDim","mapDimension","valueExtent","angleExtent","createPointer","idx","itemModel","getItemModel","pointerModel","pointerWidth","pointerLength","pointerStr","pointerOffset","pointerOffsetX","pointerOffsetY","pointerKeepAspect","pointer","createProgress","ProgressPath","isOverlap","progressWidth","count","progress","z2","diff","val","initProps","isNaN","setItemGraphicEl","isClip","seriesIndex","dataType","update","newIdx","oldIdx","previousPointer","getItemGraphicEl","previousRotate","updateProps","previousProgress","previousEndAngle","execute","each","emphasisModel","focus","blurScope","emphasisDisabled","symbolStyle","getItemVisual","visualColor","pathStyle","useStyle","image","setColor","getItemStyle","z2EmphasisLift","anchorModel","showAnchor","anchorSize","anchorType","offsetCenter","anchorKeepAspect","anchor","contentGroup","Group","newTitleEls","newDetailEls","hasAnimation","isAnimationEnabled","showPointerAbove","_titleEls","_detailEls","itemGroup","itemTitleModel","titleOffsetCenter","titleX","titleY","labelEl","attr","getName","itemDetailModel","detailOffsetCenter","detailX","detailY","detailColor","formatter_1","normal","getFormattedLabel","labelDataIndex","status","labelDimIndex","fmt","extendParams","interpolatedValue"],"sources":["/Users/minor/Documents/micro_mall/node_modules/echarts/lib/chart/gauge/GaugeView.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport PointerPath from './PointerPath.js';\nimport * as graphic from '../../util/graphic.js';\nimport { setStatesStylesFromModel, toggleHoverEmphasis } from '../../util/states.js';\nimport { createTextStyle, setLabelValueAnimation, animateLabelValue } from '../../label/labelStyle.js';\nimport ChartView from '../../view/Chart.js';\nimport { parsePercent, round, linearMap } from '../../util/number.js';\nimport Sausage from '../../util/shape/sausage.js';\nimport { createSymbol } from '../../util/symbol.js';\nimport ZRImage from 'zrender/lib/graphic/Image.js';\nimport { extend, isFunction, isString, isNumber } from 'zrender/lib/core/util.js';\nimport { setCommonECData } from '../../util/innerStore.js';\nimport { normalizeArcAngles } from 'zrender/lib/core/PathProxy.js';\n\nfunction parsePosition(seriesModel, api) {\n  var center = seriesModel.get('center');\n  var width = api.getWidth();\n  var height = api.getHeight();\n  var size = Math.min(width, height);\n  var cx = parsePercent(center[0], api.getWidth());\n  var cy = parsePercent(center[1], api.getHeight());\n  var r = parsePercent(seriesModel.get('radius'), size / 2);\n  return {\n    cx: cx,\n    cy: cy,\n    r: r\n  };\n}\n\nfunction formatLabel(value, labelFormatter) {\n  var label = value == null ? '' : value + '';\n\n  if (labelFormatter) {\n    if (isString(labelFormatter)) {\n      label = labelFormatter.replace('{value}', label);\n    } else if (isFunction(labelFormatter)) {\n      label = labelFormatter(value);\n    }\n  }\n\n  return label;\n}\n\nvar GaugeView =\n/** @class */\nfunction (_super) {\n  __extends(GaugeView, _super);\n\n  function GaugeView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = GaugeView.type;\n    return _this;\n  }\n\n  GaugeView.prototype.render = function (seriesModel, ecModel, api) {\n    this.group.removeAll();\n    var colorList = seriesModel.get(['axisLine', 'lineStyle', 'color']);\n    var posInfo = parsePosition(seriesModel, api);\n\n    this._renderMain(seriesModel, ecModel, api, colorList, posInfo);\n\n    this._data = seriesModel.getData();\n  };\n\n  GaugeView.prototype.dispose = function () {};\n\n  GaugeView.prototype._renderMain = function (seriesModel, ecModel, api, colorList, posInfo) {\n    var group = this.group;\n    var clockwise = seriesModel.get('clockwise');\n    var startAngle = -seriesModel.get('startAngle') / 180 * Math.PI;\n    var endAngle = -seriesModel.get('endAngle') / 180 * Math.PI;\n    var axisLineModel = seriesModel.getModel('axisLine');\n    var roundCap = axisLineModel.get('roundCap');\n    var MainPath = roundCap ? Sausage : graphic.Sector;\n    var showAxis = axisLineModel.get('show');\n    var lineStyleModel = axisLineModel.getModel('lineStyle');\n    var axisLineWidth = lineStyleModel.get('width');\n    var angles = [startAngle, endAngle];\n    normalizeArcAngles(angles, !clockwise);\n    startAngle = angles[0];\n    endAngle = angles[1];\n    var angleRangeSpan = endAngle - startAngle;\n    var prevEndAngle = startAngle;\n\n    for (var i = 0; showAxis && i < colorList.length; i++) {\n      // Clamp\n      var percent = Math.min(Math.max(colorList[i][0], 0), 1);\n      endAngle = startAngle + angleRangeSpan * percent;\n      var sector = new MainPath({\n        shape: {\n          startAngle: prevEndAngle,\n          endAngle: endAngle,\n          cx: posInfo.cx,\n          cy: posInfo.cy,\n          clockwise: clockwise,\n          r0: posInfo.r - axisLineWidth,\n          r: posInfo.r\n        },\n        silent: true\n      });\n      sector.setStyle({\n        fill: colorList[i][1]\n      });\n      sector.setStyle(lineStyleModel.getLineStyle( // Because we use sector to simulate arc\n      // so the properties for stroking are useless\n      ['color', 'width']));\n      group.add(sector);\n      prevEndAngle = endAngle;\n    }\n\n    var getColor = function (percent) {\n      // Less than 0\n      if (percent <= 0) {\n        return colorList[0][1];\n      }\n\n      var i;\n\n      for (i = 0; i < colorList.length; i++) {\n        if (colorList[i][0] >= percent && (i === 0 ? 0 : colorList[i - 1][0]) < percent) {\n          return colorList[i][1];\n        }\n      } // More than 1\n\n\n      return colorList[i - 1][1];\n    };\n\n    this._renderTicks(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth);\n\n    this._renderTitleAndDetail(seriesModel, ecModel, api, getColor, posInfo);\n\n    this._renderAnchor(seriesModel, posInfo);\n\n    this._renderPointer(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth);\n  };\n\n  GaugeView.prototype._renderTicks = function (seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth) {\n    var group = this.group;\n    var cx = posInfo.cx;\n    var cy = posInfo.cy;\n    var r = posInfo.r;\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var splitLineModel = seriesModel.getModel('splitLine');\n    var tickModel = seriesModel.getModel('axisTick');\n    var labelModel = seriesModel.getModel('axisLabel');\n    var splitNumber = seriesModel.get('splitNumber');\n    var subSplitNumber = tickModel.get('splitNumber');\n    var splitLineLen = parsePercent(splitLineModel.get('length'), r);\n    var tickLen = parsePercent(tickModel.get('length'), r);\n    var angle = startAngle;\n    var step = (endAngle - startAngle) / splitNumber;\n    var subStep = step / subSplitNumber;\n    var splitLineStyle = splitLineModel.getModel('lineStyle').getLineStyle();\n    var tickLineStyle = tickModel.getModel('lineStyle').getLineStyle();\n    var splitLineDistance = splitLineModel.get('distance');\n    var unitX;\n    var unitY;\n\n    for (var i = 0; i <= splitNumber; i++) {\n      unitX = Math.cos(angle);\n      unitY = Math.sin(angle); // Split line\n\n      if (splitLineModel.get('show')) {\n        var distance = splitLineDistance ? splitLineDistance + axisLineWidth : axisLineWidth;\n        var splitLine = new graphic.Line({\n          shape: {\n            x1: unitX * (r - distance) + cx,\n            y1: unitY * (r - distance) + cy,\n            x2: unitX * (r - splitLineLen - distance) + cx,\n            y2: unitY * (r - splitLineLen - distance) + cy\n          },\n          style: splitLineStyle,\n          silent: true\n        });\n\n        if (splitLineStyle.stroke === 'auto') {\n          splitLine.setStyle({\n            stroke: getColor(i / splitNumber)\n          });\n        }\n\n        group.add(splitLine);\n      } // Label\n\n\n      if (labelModel.get('show')) {\n        var distance = labelModel.get('distance') + splitLineDistance;\n        var label = formatLabel(round(i / splitNumber * (maxVal - minVal) + minVal), labelModel.get('formatter'));\n        var autoColor = getColor(i / splitNumber);\n        var textStyleX = unitX * (r - splitLineLen - distance) + cx;\n        var textStyleY = unitY * (r - splitLineLen - distance) + cy;\n        var rotateType = labelModel.get('rotate');\n        var rotate = 0;\n\n        if (rotateType === 'radial') {\n          rotate = -angle + 2 * Math.PI;\n\n          if (rotate > Math.PI / 2) {\n            rotate += Math.PI;\n          }\n        } else if (rotateType === 'tangential') {\n          rotate = -angle - Math.PI / 2;\n        } else if (isNumber(rotateType)) {\n          rotate = rotateType * Math.PI / 180;\n        }\n\n        if (rotate === 0) {\n          group.add(new graphic.Text({\n            style: createTextStyle(labelModel, {\n              text: label,\n              x: textStyleX,\n              y: textStyleY,\n              verticalAlign: unitY < -0.8 ? 'top' : unitY > 0.8 ? 'bottom' : 'middle',\n              align: unitX < -0.4 ? 'left' : unitX > 0.4 ? 'right' : 'center'\n            }, {\n              inheritColor: autoColor\n            }),\n            silent: true\n          }));\n        } else {\n          group.add(new graphic.Text({\n            style: createTextStyle(labelModel, {\n              text: label,\n              x: textStyleX,\n              y: textStyleY,\n              verticalAlign: 'middle',\n              align: 'center'\n            }, {\n              inheritColor: autoColor\n            }),\n            silent: true,\n            originX: textStyleX,\n            originY: textStyleY,\n            rotation: rotate\n          }));\n        }\n      } // Axis tick\n\n\n      if (tickModel.get('show') && i !== splitNumber) {\n        var distance = tickModel.get('distance');\n        distance = distance ? distance + axisLineWidth : axisLineWidth;\n\n        for (var j = 0; j <= subSplitNumber; j++) {\n          unitX = Math.cos(angle);\n          unitY = Math.sin(angle);\n          var tickLine = new graphic.Line({\n            shape: {\n              x1: unitX * (r - distance) + cx,\n              y1: unitY * (r - distance) + cy,\n              x2: unitX * (r - tickLen - distance) + cx,\n              y2: unitY * (r - tickLen - distance) + cy\n            },\n            silent: true,\n            style: tickLineStyle\n          });\n\n          if (tickLineStyle.stroke === 'auto') {\n            tickLine.setStyle({\n              stroke: getColor((i + j / subSplitNumber) / splitNumber)\n            });\n          }\n\n          group.add(tickLine);\n          angle += subStep;\n        }\n\n        angle -= subStep;\n      } else {\n        angle += step;\n      }\n    }\n  };\n\n  GaugeView.prototype._renderPointer = function (seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth) {\n    var group = this.group;\n    var oldData = this._data;\n    var oldProgressData = this._progressEls;\n    var progressList = [];\n    var showPointer = seriesModel.get(['pointer', 'show']);\n    var progressModel = seriesModel.getModel('progress');\n    var showProgress = progressModel.get('show');\n    var data = seriesModel.getData();\n    var valueDim = data.mapDimension('value');\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var valueExtent = [minVal, maxVal];\n    var angleExtent = [startAngle, endAngle];\n\n    function createPointer(idx, angle) {\n      var itemModel = data.getItemModel(idx);\n      var pointerModel = itemModel.getModel('pointer');\n      var pointerWidth = parsePercent(pointerModel.get('width'), posInfo.r);\n      var pointerLength = parsePercent(pointerModel.get('length'), posInfo.r);\n      var pointerStr = seriesModel.get(['pointer', 'icon']);\n      var pointerOffset = pointerModel.get('offsetCenter');\n      var pointerOffsetX = parsePercent(pointerOffset[0], posInfo.r);\n      var pointerOffsetY = parsePercent(pointerOffset[1], posInfo.r);\n      var pointerKeepAspect = pointerModel.get('keepAspect');\n      var pointer; // not exist icon type will be set 'rect'\n\n      if (pointerStr) {\n        pointer = createSymbol(pointerStr, pointerOffsetX - pointerWidth / 2, pointerOffsetY - pointerLength, pointerWidth, pointerLength, null, pointerKeepAspect);\n      } else {\n        pointer = new PointerPath({\n          shape: {\n            angle: -Math.PI / 2,\n            width: pointerWidth,\n            r: pointerLength,\n            x: pointerOffsetX,\n            y: pointerOffsetY\n          }\n        });\n      }\n\n      pointer.rotation = -(angle + Math.PI / 2);\n      pointer.x = posInfo.cx;\n      pointer.y = posInfo.cy;\n      return pointer;\n    }\n\n    function createProgress(idx, endAngle) {\n      var roundCap = progressModel.get('roundCap');\n      var ProgressPath = roundCap ? Sausage : graphic.Sector;\n      var isOverlap = progressModel.get('overlap');\n      var progressWidth = isOverlap ? progressModel.get('width') : axisLineWidth / data.count();\n      var r0 = isOverlap ? posInfo.r - progressWidth : posInfo.r - (idx + 1) * progressWidth;\n      var r = isOverlap ? posInfo.r : posInfo.r - idx * progressWidth;\n      var progress = new ProgressPath({\n        shape: {\n          startAngle: startAngle,\n          endAngle: endAngle,\n          cx: posInfo.cx,\n          cy: posInfo.cy,\n          clockwise: clockwise,\n          r0: r0,\n          r: r\n        }\n      });\n      isOverlap && (progress.z2 = maxVal - data.get(valueDim, idx) % maxVal);\n      return progress;\n    }\n\n    if (showProgress || showPointer) {\n      data.diff(oldData).add(function (idx) {\n        var val = data.get(valueDim, idx);\n\n        if (showPointer) {\n          var pointer = createPointer(idx, startAngle); // TODO hide pointer on NaN value?\n\n          graphic.initProps(pointer, {\n            rotation: -((isNaN(+val) ? angleExtent[0] : linearMap(val, valueExtent, angleExtent, true)) + Math.PI / 2)\n          }, seriesModel);\n          group.add(pointer);\n          data.setItemGraphicEl(idx, pointer);\n        }\n\n        if (showProgress) {\n          var progress = createProgress(idx, startAngle);\n          var isClip = progressModel.get('clip');\n          graphic.initProps(progress, {\n            shape: {\n              endAngle: linearMap(val, valueExtent, angleExtent, isClip)\n            }\n          }, seriesModel);\n          group.add(progress); // Add data index and series index for indexing the data by element\n          // Useful in tooltip\n\n          setCommonECData(seriesModel.seriesIndex, data.dataType, idx, progress);\n          progressList[idx] = progress;\n        }\n      }).update(function (newIdx, oldIdx) {\n        var val = data.get(valueDim, newIdx);\n\n        if (showPointer) {\n          var previousPointer = oldData.getItemGraphicEl(oldIdx);\n          var previousRotate = previousPointer ? previousPointer.rotation : startAngle;\n          var pointer = createPointer(newIdx, previousRotate);\n          pointer.rotation = previousRotate;\n          graphic.updateProps(pointer, {\n            rotation: -((isNaN(+val) ? angleExtent[0] : linearMap(val, valueExtent, angleExtent, true)) + Math.PI / 2)\n          }, seriesModel);\n          group.add(pointer);\n          data.setItemGraphicEl(newIdx, pointer);\n        }\n\n        if (showProgress) {\n          var previousProgress = oldProgressData[oldIdx];\n          var previousEndAngle = previousProgress ? previousProgress.shape.endAngle : startAngle;\n          var progress = createProgress(newIdx, previousEndAngle);\n          var isClip = progressModel.get('clip');\n          graphic.updateProps(progress, {\n            shape: {\n              endAngle: linearMap(val, valueExtent, angleExtent, isClip)\n            }\n          }, seriesModel);\n          group.add(progress); // Add data index and series index for indexing the data by element\n          // Useful in tooltip\n\n          setCommonECData(seriesModel.seriesIndex, data.dataType, newIdx, progress);\n          progressList[newIdx] = progress;\n        }\n      }).execute();\n      data.each(function (idx) {\n        var itemModel = data.getItemModel(idx);\n        var emphasisModel = itemModel.getModel('emphasis');\n        var focus = emphasisModel.get('focus');\n        var blurScope = emphasisModel.get('blurScope');\n        var emphasisDisabled = emphasisModel.get('disabled');\n\n        if (showPointer) {\n          var pointer = data.getItemGraphicEl(idx);\n          var symbolStyle = data.getItemVisual(idx, 'style');\n          var visualColor = symbolStyle.fill;\n\n          if (pointer instanceof ZRImage) {\n            var pathStyle = pointer.style;\n            pointer.useStyle(extend({\n              image: pathStyle.image,\n              x: pathStyle.x,\n              y: pathStyle.y,\n              width: pathStyle.width,\n              height: pathStyle.height\n            }, symbolStyle));\n          } else {\n            pointer.useStyle(symbolStyle);\n            pointer.type !== 'pointer' && pointer.setColor(visualColor);\n          }\n\n          pointer.setStyle(itemModel.getModel(['pointer', 'itemStyle']).getItemStyle());\n\n          if (pointer.style.fill === 'auto') {\n            pointer.setStyle('fill', getColor(linearMap(data.get(valueDim, idx), valueExtent, [0, 1], true)));\n          }\n\n          pointer.z2EmphasisLift = 0;\n          setStatesStylesFromModel(pointer, itemModel);\n          toggleHoverEmphasis(pointer, focus, blurScope, emphasisDisabled);\n        }\n\n        if (showProgress) {\n          var progress = progressList[idx];\n          progress.useStyle(data.getItemVisual(idx, 'style'));\n          progress.setStyle(itemModel.getModel(['progress', 'itemStyle']).getItemStyle());\n          progress.z2EmphasisLift = 0;\n          setStatesStylesFromModel(progress, itemModel);\n          toggleHoverEmphasis(progress, focus, blurScope, emphasisDisabled);\n        }\n      });\n      this._progressEls = progressList;\n    }\n  };\n\n  GaugeView.prototype._renderAnchor = function (seriesModel, posInfo) {\n    var anchorModel = seriesModel.getModel('anchor');\n    var showAnchor = anchorModel.get('show');\n\n    if (showAnchor) {\n      var anchorSize = anchorModel.get('size');\n      var anchorType = anchorModel.get('icon');\n      var offsetCenter = anchorModel.get('offsetCenter');\n      var anchorKeepAspect = anchorModel.get('keepAspect');\n      var anchor = createSymbol(anchorType, posInfo.cx - anchorSize / 2 + parsePercent(offsetCenter[0], posInfo.r), posInfo.cy - anchorSize / 2 + parsePercent(offsetCenter[1], posInfo.r), anchorSize, anchorSize, null, anchorKeepAspect);\n      anchor.z2 = anchorModel.get('showAbove') ? 1 : 0;\n      anchor.setStyle(anchorModel.getModel('itemStyle').getItemStyle());\n      this.group.add(anchor);\n    }\n  };\n\n  GaugeView.prototype._renderTitleAndDetail = function (seriesModel, ecModel, api, getColor, posInfo) {\n    var _this = this;\n\n    var data = seriesModel.getData();\n    var valueDim = data.mapDimension('value');\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var contentGroup = new graphic.Group();\n    var newTitleEls = [];\n    var newDetailEls = [];\n    var hasAnimation = seriesModel.isAnimationEnabled();\n    var showPointerAbove = seriesModel.get(['pointer', 'showAbove']);\n    data.diff(this._data).add(function (idx) {\n      newTitleEls[idx] = new graphic.Text({\n        silent: true\n      });\n      newDetailEls[idx] = new graphic.Text({\n        silent: true\n      });\n    }).update(function (idx, oldIdx) {\n      newTitleEls[idx] = _this._titleEls[oldIdx];\n      newDetailEls[idx] = _this._detailEls[oldIdx];\n    }).execute();\n    data.each(function (idx) {\n      var itemModel = data.getItemModel(idx);\n      var value = data.get(valueDim, idx);\n      var itemGroup = new graphic.Group();\n      var autoColor = getColor(linearMap(value, [minVal, maxVal], [0, 1], true));\n      var itemTitleModel = itemModel.getModel('title');\n\n      if (itemTitleModel.get('show')) {\n        var titleOffsetCenter = itemTitleModel.get('offsetCenter');\n        var titleX = posInfo.cx + parsePercent(titleOffsetCenter[0], posInfo.r);\n        var titleY = posInfo.cy + parsePercent(titleOffsetCenter[1], posInfo.r);\n        var labelEl = newTitleEls[idx];\n        labelEl.attr({\n          z2: showPointerAbove ? 0 : 2,\n          style: createTextStyle(itemTitleModel, {\n            x: titleX,\n            y: titleY,\n            text: data.getName(idx),\n            align: 'center',\n            verticalAlign: 'middle'\n          }, {\n            inheritColor: autoColor\n          })\n        });\n        itemGroup.add(labelEl);\n      }\n\n      var itemDetailModel = itemModel.getModel('detail');\n\n      if (itemDetailModel.get('show')) {\n        var detailOffsetCenter = itemDetailModel.get('offsetCenter');\n        var detailX = posInfo.cx + parsePercent(detailOffsetCenter[0], posInfo.r);\n        var detailY = posInfo.cy + parsePercent(detailOffsetCenter[1], posInfo.r);\n        var width = parsePercent(itemDetailModel.get('width'), posInfo.r);\n        var height = parsePercent(itemDetailModel.get('height'), posInfo.r);\n        var detailColor = seriesModel.get(['progress', 'show']) ? data.getItemVisual(idx, 'style').fill : autoColor;\n        var labelEl = newDetailEls[idx];\n        var formatter_1 = itemDetailModel.get('formatter');\n        labelEl.attr({\n          z2: showPointerAbove ? 0 : 2,\n          style: createTextStyle(itemDetailModel, {\n            x: detailX,\n            y: detailY,\n            text: formatLabel(value, formatter_1),\n            width: isNaN(width) ? null : width,\n            height: isNaN(height) ? null : height,\n            align: 'center',\n            verticalAlign: 'middle'\n          }, {\n            inheritColor: detailColor\n          })\n        });\n        setLabelValueAnimation(labelEl, {\n          normal: itemDetailModel\n        }, value, function (value) {\n          return formatLabel(value, formatter_1);\n        });\n        hasAnimation && animateLabelValue(labelEl, idx, data, seriesModel, {\n          getFormattedLabel: function (labelDataIndex, status, dataType, labelDimIndex, fmt, extendParams) {\n            return formatLabel(extendParams ? extendParams.interpolatedValue : value, formatter_1);\n          }\n        });\n        itemGroup.add(labelEl);\n      }\n\n      contentGroup.add(itemGroup);\n    });\n    this.group.add(contentGroup);\n    this._titleEls = newTitleEls;\n    this._detailEls = newDetailEls;\n  };\n\n  GaugeView.type = 'gauge';\n  return GaugeView;\n}(ChartView);\n\nexport default GaugeView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}